name: GITGUARD-CI

on:
  push:
    branches: [develop]

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and start Gitea
        run: |
          docker compose build --no-cache
          docker compose up -d gitea

      - name: Wait for Gitea to become ready
        run: |
          echo "[CI] Waiting for Gitea to become ready..."
          bash scripts/wait_for_gitea.sh

      - name: Initialize Gitea inside container
        run: |
          echo "[CI] Running init_gitea.sh inside gitea container..."
          docker exec gitea bash /docker-entrypoint-init.d/init_gitea.sh

      - name: Prepare allure-results directories
        if: always()
        run: |
          sudo rm -rf ./allure-results || true
          sudo mkdir -p ./allure-results/unit ./allure-results/e2e
          sudo chmod -R 777 ./allure-results

      - name: Run unit tests inside tester
        continue-on-error: true
        run: |
          echo "[CI] Running UNIT tests..."
          docker compose run --rm tester pytest -v -n auto \
            -m "unit" \
            --alluredir=/app/allure-results/unit tests || true

      - name: Run e2e tests inside tester
        continue-on-error: true
        run: |
          echo "[CI] Running E2E tests..."
          docker compose run --rm tester pytest -v -n auto \
            -m "e2e" \
            --alluredir=/app/allure-results/e2e tests || true

      - name: Upload allure results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: ./allure-results
          if-no-files-found: warn

      - name: Stop containers and cleanup
        if: always()
        run: docker compose down -v

  deploy-report:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download allure results
        if: always()
        uses: actions/download-artifact@v4
        with:
          name: allure-results
          path: ./allure-results

      - name: Debug downloaded results
        if: always()
        run: |
          echo "[DEBUG] In deploy-report after download:"
          ls -la ./allure-results || true

      - name: Install Allure CLI
        run: |
          curl -sL https://github.com/allure-framework/allure2/releases/download/2.30.0/allure-2.30.0.tgz -o allure.tgz
          sudo tar -zxvf allure.tgz -C /opt/
          sudo ln -s /opt/allure-2.30.0/bin/allure /usr/local/bin/allure
          allure --version
    
      - name: Generate Allure Report
        run: |
          allure merge ./allure-results/unit ./allure-results/e2e -o ./allure-results-merged
          allure generate ./allure-results-merged -o ./allure-report --clean

      - name: Upload Pages artifact
        if: always()
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./allure-report

      - name: Deploy to GitHub Pages
        if: always()
        id: deployment
        uses: actions/deploy-pages@v4
